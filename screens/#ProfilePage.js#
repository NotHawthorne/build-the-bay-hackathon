import React, { Component } from 'react'
    import { Card, Icon } from 'react-native-elements'
	import {
	Image,
	    ImageBackground,
	    Linking,
	    ListView,
	    Platform,
	    ScrollView,
	    StyleSheet,
	    Text,
	    View,
  } from 'react-native'
      onst styles = StyleSheet.create({
	      cardContainer: {
		  backgroundColor: '#FFF',
		  borderWidth: 0,
		  flex: 1,
		  margin: 0,
		  padding: 0,
	      },
	      container: {
		  flex: 1,
	      },
	      emailContainer: {
		  backgroundColor: '#FFF',
		  flex: 1,
		  paddingTop: 30,
	      },
	      headerBackgroundImage: {
		  paddingBottom: 20,
		  paddingTop: 35,
	      },
	      headerContainer: {},
	      headerColumn: {
		  backgroundColor: 'transparent',
		  ...Platform.select({
			  ios: {
			      alignItems: 'center',
			      elevation: 1,
			      marginTop: -1,
			  },
			  android: {
			      alignItems: 'center',
			  },
		      }),
	      },
	      placeIcon: {
		  color: 'white',
		  fontSize: 26,
	      },
	      scroll: {
		  backgroundColor: '#FFF',
	      },
	      telContainer: {
		  backgroundColor: '#FFF',
		  flex: 1,
		  paddingTop: 30,
	      },
	      userAddressRow: {
		  alignItems: 'center',
		  flexDirection: 'row',
	      },
	      userCityRow: {
		  backgroundColor: 'transparent',
	      },
	      userCityText: {
		  color: '#A5A5A5',
		  fontSize: 15,
		  fontWeight: '600',
		  textAlign: 'center',
	      },
	      userImage: {
		  borderColor: mainColor,
		  borderRadius: 85,
		  borderWidth: 3,
		  height: 170,
		  marginBottom: 15,
		  width: 170,
	      },
	      userNameText: {
		  color: '#FFF',
		  fontSize: 22,
		  fontWeight: 'bold',
		  paddingBottom: 8,
		  textAlign: 'center',
	      },
	  })

			      class Contact extends Component {
				  static propTypes = {
				      avatar: PropTypes.string.isRequired,
				      avatarBackground: PropTypes.string.isRequired,
				      name: PropTypes.string.isRequired,
				      address: PropTypes.shape({
					      city: PropTypes.string.isRequired,
					      country: PropTypes.string.isRequired,
					  }).isRequired,
				      emails: PropTypes.arrayOf(
								PropTypes.shape({
									email: PropTypes.string.isRequired,
									id: PropTypes.number.isRequired,
									name: PropTypes.string.isRequired,
								    })
								).isRequired,
				      tels: PropTypes.arrayOf(
							      PropTypes.shape({
								      id: PropTypes.number.isRequired,
								      name: PropTypes.string.isRequired,
								      number: PropTypes.string.isRequired,
								  })
							      ).isRequired,
				  }

				      state = {
					  telDS: new ListView.DataSource({
						  rowHasChanged: (r1, r2) => r1 !== r2,
					      }).cloneWithRows(this.props.tels),
					  emailDS: new ListView.DataSource({
						  rowHasChanged: (r1, r2) => r1 !== r2,
					      }).cloneWithRows(this.props.emails),
				      }

					  onPressPlace = () => {
					      console.log('place')
					  }